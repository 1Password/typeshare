// Code generated by typeshare 1.0.0. DO NOT EDIT.
package proto

import "encoding/json"

type SomeTypeAlias SomeStruct<string>

type SomeStruct struct {
	SomeField SomeEnum `json:"some_field"`
	SomeSpecialField []*map[T]SomeEnum `json:"some_special_field"`
}
// Generated type representing the anonymous struct variant `Anon` of the `SomeEnum` Rust enum
type SomeEnumAnonInner struct {
	TheField SomeStruct `json:"the_field"`
}
type SomeEnumTypes string
const (
	SomeEnumTypeVariantUnit SomeEnumTypes = "Unit"
	SomeEnumTypeVariantAlg SomeEnumTypes = "Alg"
	SomeEnumTypeVariantAnon SomeEnumTypes = "Anon"
)
type SomeEnum struct{ 
	Type SomeEnumTypes `json:"type"`
	content interface{}
}

func (s *SomeEnum) UnmarshalJSON(data []byte) error {
	var enum struct {
		Tag    SomeEnumTypes   `json:"type"`
		Content json.RawMessage `json:"content"`
	}
	if err := json.Unmarshal(data, &enum); err != nil {
		return err
	}

	s.Type = enum.Tag
	switch s.Type {
	case SomeEnumTypeVariantUnit:
		return nil
	case SomeEnumTypeVariantAlg:
		var res SomeStruct
		s.content = &res
	case SomeEnumTypeVariantAnon:
		var res SomeEnumAnonInner
		s.content = &res

	}
	if err := json.Unmarshal(enum.Content, &s.content); err != nil {
		return err
	}

	return nil
}

func (s SomeEnum) MarshalJSON() ([]byte, error) {
    var enum struct {
		Tag    SomeEnumTypes   `json:"type"`
		Content interface{} `json:"content,omitempty"`
    }
    enum.Tag = s.Type
    enum.Content = s.content
    return json.Marshal(enum)
}

func (s SomeEnum) Alg() *SomeStruct {
	res, _ := s.content.(*SomeStruct)
	return res
}
func (s SomeEnum) Anon() *SomeEnumAnonInner {
	res, _ := s.content.(*SomeEnumAnonInner)
	return res
}

func NewSomeEnumTypeVariantUnit() SomeEnum {
    return SomeEnum{
        Type: SomeEnumTypeVariantUnit,
    }
}
func NewSomeEnumTypeVariantAlg(content *SomeStruct) SomeEnum {
    return SomeEnum{
        Type: SomeEnumTypeVariantAlg,
        content: content,
    }
}
func NewSomeEnumTypeVariantAnon(content *SomeEnumAnonInner) SomeEnum {
    return SomeEnum{
        Type: SomeEnumTypeVariantAnon,
        content: content,
    }
}

