/*
 Generated by typeshare 1.0.0
 */

import Foundation


/// Generated type representing the anonymous struct variant `Anon` of the `SomeEnum` Rust enum
public struct SomeEnumAnonInner: Codable {
	public let the_field: SomeStruct

	public init(the_field: SomeStruct) {
		self.the_field = the_field
	}
}
public enum SomeEnum: Codable {
	case unit
	case alg(SomeStruct)
	case anon(SomeEnumAnonInner)

	enum CodingKeys: String, CodingKey, Codable {
		case unit = "Unit",
			alg = "Alg",
			anon = "Anon"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, content
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .unit:
				self = .unit
				return
			case .alg:
				if let content = try? container.decode(SomeStruct.self, forKey: .content) {
					self = .alg(content)
					return
				}
			case .anon:
				if let content = try? container.decode(SomeEnumAnonInner.self, forKey: .content) {
					self = .anon(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(SomeEnum.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for SomeEnum"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .unit:
			try container.encode(CodingKeys.unit, forKey: .type)
		case .alg(let content):
			try container.encode(CodingKeys.alg, forKey: .type)
			try container.encode(content, forKey: .content)
		case .anon(let content):
			try container.encode(CodingKeys.anon, forKey: .type)
			try container.encode(content, forKey: .content)
		}
	}
}

public struct SomeStruct<T: Codable>: Codable {
	public let some_field: SomeEnum
	public let some_special_field: [[T: SomeEnum]?]

	public init(some_field: SomeEnum, some_special_field: [[T: SomeEnum]?]) {
		self.some_field = some_field
		self.some_special_field = some_special_field
	}
}

public typealias SomeTypeAlias = SomeStruct<String>
