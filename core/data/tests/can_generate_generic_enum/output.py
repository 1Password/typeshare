"""
 Generated by typeshare 1.0.0
"""
from __future__ import annotations

from pydantic import BaseModel
from pydantic.generics import GenericModel
from typing import Dict, Generic, List, Literal, TypeVar

T = TypeVar("T")
T2 = TypeVar("T2")
A = TypeVar("A")
T1 = TypeVar("T1")
U = TypeVar("U")
B = TypeVar("B")


class StructUsingGenericEnum(BaseModel):
    enum_field: GenericEnum[str, int]


class GenericEnumsUsingStructVariantsVariantFInner(GenericModel, Generic[T]):
    """
    Generated type representing the anonymous struct variant `VariantF` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    action: T


class GenericEnumsUsingStructVariantsVariantGInner(GenericModel, Generic[T, U]):
    """
    Generated type representing the anonymous struct variant `VariantG` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    action: T
    response: U


class GenericEnumsUsingStructVariantsVariantHInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `VariantH` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    non_generic: int


class GenericEnumsUsingStructVariantsVariantIInner(GenericModel, Generic[T, U]):
    """
    Generated type representing the anonymous struct variant `VariantI` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    vec: List[T]
    action: MyType[T, U]


GenericEnumsUsingStructVariants = GenericEnumsUsingStructVariantsVariantFInner[T] | GenericEnumsUsingStructVariantsVariantGInner[T, T1] | GenericEnumsUsingStructVariantsVariantHInner | GenericEnumsUsingStructVariantsVariantIInner[T, T1, T2]

class GenericEnumUsingGenericEnumVariantC(GenericModel, Generic[T]):
    type: Literal["VariantC"]
    content: GenericEnum[T, T]


class GenericEnumUsingGenericEnumVariantD(GenericModel, Generic[T]):
    type: Literal["VariantD"]
    content: GenericEnum[str, Dict[str, T]]


class GenericEnumUsingGenericEnumVariantE(BaseModel):
    type: Literal["VariantE"]
    content: GenericEnum[str, int]


GenericEnumUsingGenericEnum = GenericEnumUsingGenericEnumVariantC[T] | GenericEnumUsingGenericEnumVariantD[T] | GenericEnumUsingGenericEnumVariantE

class GenericEnumVariantA(GenericModel, Generic[A]):
    type: Literal["VariantA"]
    content: A


class GenericEnumVariantB(GenericModel, Generic[B]):
    type: Literal["VariantB"]
    content: B


GenericEnum = GenericEnumVariantA[A] | GenericEnumVariantB[B]

