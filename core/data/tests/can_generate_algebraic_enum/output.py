"""
 Generated by typeshare 1.12.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import List, Union


class ItemDetailsFieldValue(BaseModel):
    """
    Struct comment
    """
    pass

class AdvancedColorsTypes(str, Enum):
    STRING = "String"
    NUMBER = "Number"
    UNSIGNED_NUMBER = "UnsignedNumber"
    NUMBER_ARRAY = "NumberArray"
    REALLY_COOL_TYPE = "ReallyCoolType"

class AdvancedColors(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: AdvancedColorsTypes
    content: Union[str, int, int, List[int], ItemDetailsFieldValue]


    @classmethod
    def new_advanced_colors_string(cls, content : str):
        return cls(
            type=AdvancedColorsTypes.STRING,
            content=content
        )


    @classmethod
    def new_advanced_colors_number(cls, content : int):
        return cls(
            type=AdvancedColorsTypes.NUMBER,
            content=content
        )


    @classmethod
    def new_advanced_colors_unsigned_number(cls, content : int):
        return cls(
            type=AdvancedColorsTypes.UNSIGNED_NUMBER,
            content=content
        )


    @classmethod
    def new_advanced_colors_number_array(cls, content : List[int]):
        return cls(
            type=AdvancedColorsTypes.NUMBER_ARRAY,
            content=content
        )


    @classmethod
    def new_advanced_colors_really_cool_type(cls, content : ItemDetailsFieldValue):
        return cls(
            type=AdvancedColorsTypes.REALLY_COOL_TYPE,
            content=content
        )
class AdvancedColors2Types(str, Enum):
    STRING = "string"
    NUMBER = "number"
    NUMBER_ARRAY = "number-array"
    REALLY_COOL_TYPE = "really-cool-type"

class AdvancedColors2(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: AdvancedColors2Types
    content: Union[str, int, List[int], ItemDetailsFieldValue]


    @classmethod
    def new_advanced_colors_2_string(cls, content : str):
        return cls(
            type=AdvancedColors2Types.STRING,
            content=content
        )


    @classmethod
    def new_advanced_colors_2_number(cls, content : int):
        return cls(
            type=AdvancedColors2Types.NUMBER,
            content=content
        )


    @classmethod
    def new_advanced_colors_2_number_array(cls, content : List[int]):
        return cls(
            type=AdvancedColors2Types.NUMBER_ARRAY,
            content=content
        )


    @classmethod
    def new_advanced_colors_2_really_cool_type(cls, content : ItemDetailsFieldValue):
        return cls(
            type=AdvancedColors2Types.REALLY_COOL_TYPE,
            content=content
        )
