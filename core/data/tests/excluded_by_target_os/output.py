"""
 Generated by typeshare 1.11.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Union


class DefinedTwice(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    field_1: str


class Excluded(BaseModel):
    pass

class ManyStruct(BaseModel):
    pass

class MultipleTargets(BaseModel):
    pass

class NestedNotTarget1(BaseModel):
    pass

class OtherExcluded(BaseModel):
    pass

class SomeEnum(Enum):
    pass

class TestEnumVariant7(BaseModel):
    """
    Generated type representing the anonymous struct variant `Variant7` of the `TestEnum` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    field_1: str


class TestEnumVariant9(BaseModel):
    """
    Generated type representing the anonymous struct variant `Variant9` of the `TestEnum` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    field_2: str


class TestEnumTypes(str, Enum):
    VARIANT_1 = "Variant1"
    VARIANT_5 = "Variant5"
    VARIANT_7 = "Variant7"
    VARIANT_8 = "Variant8"
    VARIANT_9 = "Variant9"




class TestEnum(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: TestEnumTypes
    content: Union[TestEnumVariant7, TestEnumVariant9, None]


    @classmethod
    def new_test_enum_variant_1(cls) -> TestEnum:
        return cls(
            type=TestEnumTypes.VARIANT_1,
            content=None
	    )


    @classmethod
    def new_test_enum_variant_5(cls) -> TestEnum:
        return cls(
            type=TestEnumTypes.VARIANT_5,
            content=None
	    )


    @classmethod
    def new_test_enum_variant_7(cls, field_1: str):
        return cls(
            type=TestEnumTypes.VARIANT_7,
            content=TestEnumVariant7(field_1 = field_1)
	    )


    @classmethod
    def new_test_enum_variant_8(cls) -> TestEnum:
        return cls(
            type=TestEnumTypes.VARIANT_8,
            content=None
	    )


    @classmethod
    def new_test_enum_variant_9(cls, field_2: str):
        return cls(
            type=TestEnumTypes.VARIANT_9,
            content=TestEnumVariant9(field_2 = field_2)
	    )
