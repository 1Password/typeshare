"""
 Generated by typeshare 1.12.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Literal, Union


class DefinedTwice(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    field_1: str = Field(alias="field1")

class Excluded(BaseModel):
    pass
class ManyStruct(BaseModel):
    pass
class MultipleTargets(BaseModel):
    pass
class NestedNotTarget1(BaseModel):
    pass
class OtherExcluded(BaseModel):
    pass
class SomeEnum(str, Enum):
    pass
class TestEnumVariant7Inner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Variant7` of the `TestEnum` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    field_1: str = Field(alias="field1")

class TestEnumVariant9Inner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Variant9` of the `TestEnum` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    field_2: str = Field(alias="field2")

class TestEnumVariant1(BaseModel):
    TestEnumTypes: Literal["Variant1"] = "Variant1"

class TestEnumVariant5(BaseModel):
    TestEnumTypes: Literal["Variant5"] = "Variant5"

class TestEnumVariant7(BaseModel):
    TestEnumTypes: Literal["Variant7"] = "Variant7"
    content: TestEnumVariant7Inner

class TestEnumVariant8(BaseModel):
    TestEnumTypes: Literal["Variant8"] = "Variant8"

class TestEnumVariant9(BaseModel):
    TestEnumTypes: Literal["Variant9"] = "Variant9"
    content: TestEnumVariant9Inner

TestEnum = Union[TestEnumVariant1, TestEnumVariant5, TestEnumVariant7, TestEnumVariant8, TestEnumVariant9]
