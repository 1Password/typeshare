"""
 Generated by typeshare 1.0.0
"""
from __future__ import annotations

from typing import Literal, TypeVar, Generic, List
from pydantic import BaseModel
from pydantic.generics import GenericModel

T = TypeVar("T")
B = TypeVar("B")
A = TypeVar("A")


class GenericStruct(GenericModel, Generic[A, B]):
    field_a: A
    field_b: List[B]


class EnumUsingGenericStructVariantA(BaseModel):
    type: Literal["VariantA"]
    content: GenericStruct[str, float]


class EnumUsingGenericStructVariantB(BaseModel):
    type: Literal["VariantB"]
    content: GenericStruct[str, int]


class EnumUsingGenericStructVariantC(BaseModel):
    type: Literal["VariantC"]
    content: GenericStruct[str, bool]


class EnumUsingGenericStructVariantD(BaseModel):
    type: Literal["VariantD"]
    content: GenericStructUsingGenericStruct[None]


EnumUsingGenericStruct = EnumUsingGenericStructVariantA | EnumUsingGenericStructVariantB | EnumUsingGenericStructVariantC | EnumUsingGenericStructVariantD

class GenericStructUsingGenericStruct(GenericModel, Generic[T]):
    struct_field: GenericStruct[str, T]
    second_struct_field: GenericStruct[T, str]
    third_struct_field: GenericStruct[T, List[T]]


