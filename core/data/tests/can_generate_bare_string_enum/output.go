package proto

import "encoding/json"

/*
 Generated by typeshare 1.0.0
*/

/** Struct comment */
type ItemDetailsFieldValue struct {
}

/** Enum comment */
type AdvancedColorsTypes string

const (
	AdvancedColorsTypeVariantString         AdvancedColorsTypes = "String"
	AdvancedColorsTypeVariantNumber         AdvancedColorsTypes = "Number"
	AdvancedColorsTypeVariantNumberArray    AdvancedColorsTypes = "NumberArray"
	AdvancedColorsTypeVariantReallyCoolType AdvancedColorsTypes = "ReallyCoolType"
)

type AdvancedColors struct {
	Type    AdvancedColorsTypes `json:"type"`
	content interface{}
}

func (a *AdvancedColors) UnmarshalJSON(data []byte) error {
	var enum struct {
		Tag     AdvancedColorsTypes `json:"type"`
		Content json.RawMessage     `json:"content"`
	}
	if err := json.Unmarshal(data, &enum); err != nil {
		return err
	}

	a.Type = enum.Tag
	switch a.Type {
	case AdvancedColorsTypeVariantString:
		var res string
		a.content = &res
	case AdvancedColorsTypeVariantNumber:
		var res int
		a.content = &res
	case AdvancedColorsTypeVariantNumberArray:
		var res []int
		a.content = &res
	case AdvancedColorsTypeVariantReallyCoolType:
		var res ItemDetailsFieldValue
		a.content = &res

	}
	if err := json.Unmarshal(enum.Content, &a.content); err != nil {
		return err
	}

	return nil
}

func (a AdvancedColors) MarshalJSON() ([]byte, error) {
	var enum struct {
		Tag     AdvancedColorsTypes `json:"type"`
		Content interface{}         `json:"content,omitempty"`
	}
	enum.Tag = a.Type
	enum.Content = a.content
	return json.Marshal(enum)
}

func (a *AdvancedColors) String() *string {
	res, ok := a.content.(*string)
	if !ok {
		return nil
	}
	return res
}
func (a *AdvancedColors) Number() *int {
	res, ok := a.content.(*int)
	if !ok {
		return nil
	}
	return res
}
func (a *AdvancedColors) NumberArray() *[]int {
	res, ok := a.content.(*[]int)
	if !ok {
		return nil
	}
	return res
}
func (a *AdvancedColors) ReallyCoolType() *ItemDetailsFieldValue {
	res, ok := a.content.(*ItemDetailsFieldValue)
	if !ok {
		return nil
	}
	return res
}

type AdvancedColors2Types string

const (
	AdvancedColors2TypeVariantString         AdvancedColors2Types = "String"
	AdvancedColors2TypeVariantNumber         AdvancedColors2Types = "Number"
	AdvancedColors2TypeVariantNumberArray    AdvancedColors2Types = "NumberArray"
	AdvancedColors2TypeVariantReallyCoolType AdvancedColors2Types = "ReallyCoolType"
)

type AdvancedColors2 struct {
	Type    AdvancedColors2Types `json:"type"`
	content interface{}
}

func (a *AdvancedColors2) UnmarshalJSON(data []byte) error {
	var enum struct {
		Tag     AdvancedColors2Types `json:"type"`
		Content json.RawMessage      `json:"content"`
	}
	if err := json.Unmarshal(data, &enum); err != nil {
		return err
	}

	a.Type = enum.Tag
	switch a.Type {
	case AdvancedColors2TypeVariantString:
		var res string
		a.content = &res
	case AdvancedColors2TypeVariantNumber:
		var res int
		a.content = &res
	case AdvancedColors2TypeVariantNumberArray:
		var res []int
		a.content = &res
	case AdvancedColors2TypeVariantReallyCoolType:
		var res ItemDetailsFieldValue
		a.content = &res

	}
	if err := json.Unmarshal(enum.Content, &a.content); err != nil {
		return err
	}

	return nil
}

func (a AdvancedColors2) MarshalJSON() ([]byte, error) {
	var enum struct {
		Tag     AdvancedColors2Types `json:"type"`
		Content interface{}          `json:"content,omitempty"`
	}
	enum.Tag = a.Type
	enum.Content = a.content
	return json.Marshal(enum)
}

func (a *AdvancedColors2) String() *string {
	res, ok := a.content.(*string)
	if !ok {
		return nil
	}
	return res
}
func (a *AdvancedColors2) Number() *int {
	res, ok := a.content.(*int)
	if !ok {
		return nil
	}
	return res
}
func (a *AdvancedColors2) NumberArray() *[]int {
	res, ok := a.content.(*[]int)
	if !ok {
		return nil
	}
	return res
}
func (a *AdvancedColors2) ReallyCoolType() *ItemDetailsFieldValue {
	res, ok := a.content.(*ItemDetailsFieldValue)
	if !ok {
		return nil
	}
	return res
}
