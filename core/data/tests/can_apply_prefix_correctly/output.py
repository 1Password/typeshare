"""
 Generated by typeshare 1.12.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Union


class ItemDetailsFieldValue(BaseModel):
    hello: str


class AdvancedColorsTypes(str, Enum):
    STRING = "String"
    NUMBER = "Number"
    NUMBER_ARRAY = "NumberArray"
    REALLY_COOL_TYPE = "ReallyCoolType"
    ARRAY_REALLY_COOL_TYPE = "ArrayReallyCoolType"
    DICTIONARY_REALLY_COOL_TYPE = "DictionaryReallyCoolType"

class AdvancedColors(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    t: AdvancedColorsTypes
    c: Union[Dict[str, ItemDetailsFieldValue], ItemDetailsFieldValue, List[ItemDetailsFieldValue], List[int], int, str]


    @classmethod
    def new_advanced_colors_string(cls, c : str):
        return cls(
            t=AdvancedColorsTypes.STRING,
            c=c
        )


    @classmethod
    def new_advanced_colors_number(cls, c : int):
        return cls(
            t=AdvancedColorsTypes.NUMBER,
            c=c
        )


    @classmethod
    def new_advanced_colors_number_array(cls, c : List[int]):
        return cls(
            t=AdvancedColorsTypes.NUMBER_ARRAY,
            c=c
        )


    @classmethod
    def new_advanced_colors_really_cool_type(cls, c : ItemDetailsFieldValue):
        return cls(
            t=AdvancedColorsTypes.REALLY_COOL_TYPE,
            c=c
        )


    @classmethod
    def new_advanced_colors_array_really_cool_type(cls, c : List[ItemDetailsFieldValue]):
        return cls(
            t=AdvancedColorsTypes.ARRAY_REALLY_COOL_TYPE,
            c=c
        )


    @classmethod
    def new_advanced_colors_dictionary_really_cool_type(cls, c : Dict[str, ItemDetailsFieldValue]):
        return cls(
            t=AdvancedColorsTypes.DICTIONARY_REALLY_COOL_TYPE,
            c=c
        )
