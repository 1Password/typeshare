"""
 Generated by typeshare 1.11.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import List, Union


class AnonymousStructWithRenameList(BaseModel):
    """
    Generated type representing the anonymous struct variant `List` of the `AnonymousStructWithRename` Rust enum
    """
    list: List[str]


class AnonymousStructWithRenameLongFieldNames(BaseModel):
    """
    Generated type representing the anonymous struct variant `LongFieldNames` of the `AnonymousStructWithRename` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    some_long_field_name: str
    and_: bool
    but_one_more: List[str]


class AnonymousStructWithRenameKebabCase(BaseModel):
    """
    Generated type representing the anonymous struct variant `KebabCase` of the `AnonymousStructWithRename` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    another_list: List[str] = Field(alias="another-list")
    camel_case_string_field: str
    something_else: bool = Field(alias="something-else")


class AnonymousStructWithRenameTypes(str, Enum):
    LIST = "list"
    LONG_FIELD_NAMES = "longFieldNames"
    KEBAB_CASE = "kebabCase"

class AnonymousStructWithRename(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: AnonymousStructWithRenameTypes
    content: Union[AnonymousStructWithRenameList, AnonymousStructWithRenameLongFieldNames, AnonymousStructWithRenameKebabCase]


    @classmethod
    def new_anonymous_struct_with_rename_list(cls, list: List[str]):
        return cls(
            type=AnonymousStructWithRenameTypes.LIST,
            content=AnonymousStructWithRenameList(list = list)
	    )


    @classmethod
    def new_anonymous_struct_with_rename_long_field_names(cls, some_long_field_name: str, and_: bool, but_one_more: List[str]):
        return cls(
            type=AnonymousStructWithRenameTypes.LONG_FIELD_NAMES,
            content=AnonymousStructWithRenameLongFieldNames(some_long_field_name = some_long_field_name, and_ = and_, but_one_more = but_one_more)
	    )


    @classmethod
    def new_anonymous_struct_with_rename_kebab_case(cls, another_list: List[str], camel_case_string_field: str, something_else: bool):
        return cls(
            type=AnonymousStructWithRenameTypes.KEBAB_CASE,
            content=AnonymousStructWithRenameKebabCase(another_list = another_list, camel_case_string_field = camel_case_string_field, something_else = something_else)
	    )
