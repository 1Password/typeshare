mod lang_impl;

use serde::{Deserialize, Serialize};
use std::mem;
use std::ops::Add;

pub use lang_impl::TypeScript;
#[cfg(feature = "cli")]
use typeshare_core::cli::clap;
use typeshare_core::language::{LanguageConfig, TypeMapping};
const DEFAULT_HEADER: &str = r#"
Generated by Typeshare
"#;
/// Enum Write Method for Anonymous Struct Enum Variants
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default, Serialize, Deserialize)]
#[cfg_attr(feature = "cli", derive(clap::ValueEnum))]
pub enum EnumWriteMethod {
    ///
    /// ```rust
    /// use serde::{Deserialize, Serialize};
    /// #[derive(Serialize, Deserialize)]
    /// #[serde(tag = "type", content = "value")]
    /// pub enum MyEnum {
    ///    ValueOne{
    ///      field: String,
    ///    },
    ///    ValueTwo{
    ///    field: String,
    ///  },
    /// }
    /// ```
    /// ```typescript
    /// // TODO: Add TypeScript Example
    /// ```
    #[default]
    OneType,
    ///
    /// ```rust
    /// use serde::{Deserialize, Serialize};
    /// #[derive(Serialize, Deserialize)]
    /// #[serde(tag = "type", content = "value")]
    /// pub enum MyEnum {
    ///    ValueOne{
    ///      field: String,
    ///    },
    ///    ValueTwo{
    ///    field: String,
    ///  },
    /// }
    /// ```
    /// ```typescript
    /// // TODO: Add TypeScript Example
    /// ```
    ManyTypes,
}
#[derive(Serialize, Deserialize, PartialEq, Eq, Debug)]
#[serde(default)]
#[cfg_attr(feature = "cli", derive(clap::Args))]
pub struct TypeScriptConfig {
    /// Rather or not to use BigInt instead of Number for 64-bit integers.
    #[cfg_attr(feature = "cli", clap(long))]
    pub use_bigint: bool,
    /// Enum Write Method
    #[cfg_attr(feature = "cli", clap(long, default_value = "one-type"))]
    pub enum_write_method: EnumWriteMethod,
    #[cfg_attr(feature = "cli", clap(skip))]
    pub type_mappings: TypeMapping,
    #[cfg_attr(feature = "cli", clap(skip))]
    pub file_header: Option<String>,
    #[cfg_attr(feature = "cli", clap(skip))]
    pub default_file_name: String,
}
impl Default for TypeScriptConfig {
    fn default() -> Self {
        TypeScriptConfig {
            use_bigint: true,
            enum_write_method: EnumWriteMethod::default(),
            type_mappings: TypeMapping::default(),
            file_header: Some(DEFAULT_HEADER.to_string()),
            default_file_name: "types.ts".to_string(),
        }
    }
}
impl Add for TypeScriptConfig {
    type Output = Self;

    fn add(mut self, command: Self) -> Self::Output {
        self.use_bigint = command.use_bigint || self.use_bigint;
        self.enum_write_method = command.enum_write_method;
        self
    }
}
impl LanguageConfig for TypeScriptConfig {
    fn default_file_name(&self) -> &str {
        &self.default_file_name
    }

    fn type_mappings(&self) -> &TypeMapping {
        &self.type_mappings
    }

    fn add_common_mappings(&mut self, common_mappings: TypeMapping) {
        self.type_mappings = common_mappings + mem::take(&mut self.type_mappings);
    }

    fn file_header(&self) -> Option<&str> {
        self.file_header.as_deref()
    }
}
